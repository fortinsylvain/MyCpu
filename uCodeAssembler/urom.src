; -----------------------------------------------------------------
; Homebrew CPU micro code
; Author: Sylvain Fortin  sylfortin71@hotmail.com
; Date : 3 may 2025
; Documentation : uCode stored in 2 binary file to be 
;                 programmed into 2864 to control the 74LSxx based 
;                 cpu.
; External RAM required to support the microcode
; 0000H - 17FFH Total RAM space
; 00A0H - 00FFH Stack
; 0100H - 17EF  Free for application
; 1FF0H SP      Stack Pointer 8 bit
; 1FF1H JSH     Temporary storage for JSR MSB address
; 1FF2H JSL          "       "     "   "  LSB    "
; 1FF3H X MSB   X Register MSB
; 1FF4H X LSB   X Register LSB
; 1FFAH E       bit<0> Equal Status bit. Set if the result is 0 otherwise cleared
; 1FFBH C       bit<0> Carry Status bit
; 1FFCH A       A Register
; 1FFEH IPH	    Instruction Pointer MSB
; 1FFFH IPL          "         "    LSB
; C000H         LED port
; E000H - F000H EEPROM for application program
; -----------------------------------------------------------------
ORG/0000H               ; 0000H   RESET
00H>R1
00H>R0                  ; Dummy Instruction
A0H>R0                  ; Stack Pointer Init
1FH>AH                  ; Stack Start : 00A0H
F0H>AL                  ; Stack Max   : 00FFH
R0>DATA
FFH>AH                  ; Get [FFFE] MSB Start Vector
FEH>AL
DATA>R0
1FH>AH                  ; MSB Start Vector Stored in IPH
FEH>AL
R0>DATA
FFH>AH                  ; Get [FFFF] LSB Start Vector
FFH>AL
DATA>R1
1FH>AH                  ; LSB Start Vector Stored in IPL
FFH>AL
R1>DATA 
01H>UH                  ; Get Pointed OP Code and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0080H               ; 0100H Get Pointed OP Code by IP and Execute
1FH>AH                  ; Read IPH
FEH>AL
DATA>R0
FFH>AL                  ; Read IPL
DATA>R1                          
R0>AH                   ; Write IPH:IPL in AH:AL
R1>AL
DATA>R3                 ; Read OP. Code
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
01H>R4                  ;  IP+1>IP | ADD. RETURN
0DH>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
R3>UH                   ; Build micro address and execute OP. code
00H>UL
JMP                     ; ***************************************************
ORG/0100H               ; 0200H Take Next OP Code and Execute
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
02H>R4                  ;  IP+1>IP | ADD. RETURN
05H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R3                 ; Read OP. Code
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
01H>R4                  ;  IP+1>IP | ADD. RETURN
0DH>R5                  ;  IP>ADD  | JMP TO ROUTINE
JMP                     ; ***************************************************
ORG/0180H               ; OP.03 INCA  INCREMENT REGISTER A
1FH>AH                  ;             C not updated, E updated
FCH>AL
DATA>R0                 ; READ REG. A
03H>R6                  ;
08H>R7                  ; R0+1>R0
3EH>UH                  ; Cout>R1-7
00H>UL
JMP
1FH>AH                  ; RESULT IN REG. A
FCH>AL
R0>DATA
;R1-7>A                 ; Carry bit stored in ALU input A
;A>Q0                   ; Place Carry in bit position <0>
;00H>R1                 ; Put '0' in ALU input A
;R1-0>A
;A>Q1                   ; Set Q<7:1> to 0
;A>Q2                   ; To have a clean Carry Status Byte
;A>Q3
;A>Q4
;A>Q5
;A>Q6
;A>Q7
;Q>R0                   ; Move Q byte in R0
;1FH>AH                 ; Store R0 in Carry Status RAM location
;FBH>AL
;R0>DATA
R0-0>A                  ; Update E (If result is zero then set E flag )
OR R0-1                 ; NOT( 7 OR 6 OR 5 OR 4 OR 3 OR 2 OR 1 OR 0 )
Q1>A
OR R0-2
Q2>A
OR R0-3
Q3>A
OR R0-4
Q4>A
OR R0-5
Q5>A
OR R0-6
Q6>A
OR R0-7
Q7>A
NOT A-0
00H>R1                  ; Set Q<7:1> to 0
R1-0>A                  ; To have a clean E Status Byte
A>Q1                   
A>Q2                   
A>Q3
A>Q4
A>Q5
A>Q6
A>Q7
Q>R1                    ; Move Q byte in R1
1FH>AH                  ; Store E in Equal Status RAM location
FAH>AL
R1>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ******************************************************
ORG/0200H               ; OP.04 LDX #****H  Load Register X with 16 bits immediate
DATA>R2                 ; Take MSB Immediate value
3BH>UH                  ;          | ADD. ROUTINE
00H>UL                  ;  IP+1>IP |
04H>R4                  ;  IP>ADD  | ADD. RETURN
06H>R5                  ;          |
JMP
DATA>R3                 ; Take LSB Immediate value
1FH>AH                  ; Put MSB value into register X MSB
F3H>AL
R2>DATA
F4H>AL                  ; Put LSB value into register X LSB
R3>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/0280H               ; OP.05 INCX  Increment Register X
1FH>AH                  ;             Carry Not Updated
F4H>AL
DATA>R0                 ; Read Reg X LSB
05H>R6                  ;
08H>R7                  ; R0+1>R0
3EH>UH                  ; Cout>R1-7
00H>UL
JMP
1FH>AH                  ; Put increment result in REG. X LSB
F4H>AL
R0>DATA
R1-7>A                  ; Add 1 to X MSB only if there is a carry
01H>UH                  ; If Cout=0 no increment on X MSB
00H>UL                  ; and go execute currently pointed OP.
JMP_A=0                 
F3H>AL                  ; If Cout=1 then we increment X MSB
DATA>R0                 ; Read X MSB
05H>R6                  ; R0+1>R0
16H>R7                  ; Cout>R1-7, go execute currently pointed OP.
3EH>UH                  
00H>UL
JMP
R0>DATA                 ; Store X MSB
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ******************************************************
ORG/0300H               ; OP.06 JSR    Jump to SubRoutine
DATA>R0                 ; Read MSB IP Destination
1FH>AH                  ; Store in JSH (Temp SP1) MSB
F1H>AL                  
R0>DATA  
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
06H>R4                  ;  IP+1>IP | ADD. RETURN
09H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R0                 ; Read LSB IP Destination
1FH>AH                  ; Store in JSL (Temp SP2) LSB
F2H>AL
R0>DATA
3CH>UH                  ;  IP+1>IP | ADDRESS OF ROUTINE TO INCREMENT IP
00H>UL                  ;          | Compute return address from routine
06H>R4                  ;          | R4 R5 Add. Return for uProgram         
12H>R5
JMP
1FH>AH                  ; Read STACK POINTER Register (SP) (8bit LSB) MSB=0H Always
F0H>AL
DATA>R0
FEH>AL                  ; Read IPH Return Adress
DATA>R1
00H>AH                  ; Put in STACK
R0>AL
R1>DATA
1FH>AH                  ; Read SP Register
F0H>AL
DATA>R0
3EH>UH                  ; Increment R0 containing SP value
00H>UL                  ; R0+1>R0  | ADD. Incrementation Routine
06H>R6                  ;          | ADD. Return
22H>R7
JMP
R0>DATA                 ; Put Result in SP Register
FFH>AL                  ; Read IPL for subroutine return
DATA>R1
00H>AH                  ; Put value of SP on address bus
R0>AL                   
R1>DATA                 ; Store IPL return on Stack
3EH>UH                  ; Increment R0 containing SP value
00H>UL                  ; R0+1>R0  | ADD. Incrementation Routine
06H>R6                  ;          | ADD. Return
2DH>R7
JMP
1FH>AH                  ; Store new value in SP Register
F0H>AL
R0>DATA
1FH>AH                  ; Read JSH stored MSB address of routine to execute
F1H>AL
DATA>R0
FEH>AL                  ; Write MSB address routine in IPH
R0>DATA
1FH>AH                  ; Read JSL stored LSB address of routine to execute
F2H>AL
DATA>R0
FFH>AL                  ; Write LSB address routine in IPL
R0>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0380H               ; OP.07 RTS    ReTurn from Subroutine
1FH>AH                  ; Read Stack Pointer Register
F0H>AL
DATA>R0
3AH>UH                  ;          | ADD. Routine R0-1>R0
00H>UL                  ; SP-1     |
07H>R6                  ;          | ADD. return
08H>R7                  ; Decrementing the Stack Pointer Register
JMP
00H>AH                  ; Read from Stack return address IPL
R0>AL
DATA>R1
1FH>AH                  ; Store in IPL Register
FFH>AL
R1>DATA
3AH>UH                  ;          | ADD. Routine R0-1>R0
00H>UL                  ; SP-1     |
07H>R6                  ;          | ADD. return
13H>R7                  ; Again decrementing the Stack Pointer Register
JMP
F0H>AL                  ; Store in SP register
R0>DATA
00H>AH                  ; Read from Stack return address IPH
R0>AL
DATA>R1
1FH>AH                  ; Store in IPH Register
FEH>AL
R1>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0400H               ; OP.08 STOP   STOP MICROPROGRAM EXECUTION
08H>UH
02H>UL
JMP                     ; ***************************************************
ORG/0480H               ; OP.09 NOP    No OPeration
01H>UH                  ; Go execute currently pointed OP.
00H>UL
JMP                     ; ***************************************************
ORG/0500H               ; OP.0A LDA (X) Load Reg A Indexed
1FH>AH                  ; Read X MSB
F3H>AL
DATA>R2
F4H>AL                  ; Read X LSB
DATA>R3
R2>AH                   ; Put on addres bus
R3>AL
DATA>R0                 ; Read pointed byte
1FH>AH                  ; Write in register A
FCH>AL   
R0>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0580H               ; OP.0B STA (X) Store Reg A Indexed
1FH>AH                  ; Read X MSB
F3H>AL
DATA>R2
F4H>AL                  ; Read X LSB
DATA>R3
FCH>AL                  ; Read Reg A
DATA>R4
R2>AH                   ; Set address bus
R3>AL
R4>DATA                 ; Write
02H>UH                  ; Next OP.
00H>UL
JMP                     ; ***************************************************
ORG/0600H               ; OP.0C JRA **H Unconditional relative jump
DATA>R0                 ; Read the displacement
R0-7>A                  ; Check sign bit <7>
0CH>UH
40H>UL
JMP_A=0                 ; if bit 7 is 0 then we jump foward,
1FH>AH                  ; Else jump backward
FFH>AL                  ; Read IPL
DATA>R1
01H>R2                  ; Put Cin(R2-0)=1
3FH>UH                  ;           | ADD. ROUTINE
00H>UL                  ; R0+R1>R0  |
0CH>R6                  ; Cout>R2-0 | RETURN ADDRESS
0EH>R7
JMP
R0>DATA                 ; Store IPL
FEH>AL                  ; Read IPH
DATA>R0
FFH>R1                  ; Sign extension
3FH>UH                  ; Cin(R2-0) | ADD. ROUTINE
00H>UL                  ; R0+R1>R0  |
0CH>R6                  ; Cout>R2-0 | RETURN ADDRESS
17H>R7
JMP
R0>DATA                 ; Store IPH
01H>UH                  ; Go execute currently pointed OP.
00H>UL
JMP
ORG/0640H 
1FH>AH                  ; Read IPL >>Jump forward arrive here<<
FFH>AL                  
DATA>R1
01H>R2                  ; Put Cin(R2-0)=1 to jump relative to next instruction
3FH>UH                  ;           | ADD. ROUTINE
00H>UL                  ; R0+R1>R0  |
0CH>R6                  ; Cout>R2-0 | RETURN ADDRESS
49H>R7
JMP
R0>DATA                 ; Store IPL
R2-0>A                  ; Add 1 to IPH only if there is a carry
01H>UH                  ; If Cout=0 no increment on IPH
00H>UL                  ; and go execute currently pointed OP.
JMP_A=0                 
FEH>AL                  ; else Cout=1 then we increment IPH
DATA>R0                 ; Read IPH
3EH>UH                  ; R0+1>R0
00H>UL                  ; Cout>R1-7
0CH>R6                  ; Return
55H>R7
JMP
R0>DATA                 ; Store IPH
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0680H               ; OP.0D SRLA   Shift Right Logical on Reg A
1FH>AH                  ;              0 -> b7 b6 b5 b4 b3 b2 b1 b0 -> C
FCH>AL
DATA>R0                 ; Read A Register and store in R0
00H>R1                  ; Clear Register R1 to insert a '0' in bit 7
R1-0>A
A>Q7
R0-7>A                  ; shift bit 6:1 to 5:0, result in Q
A>Q6
R0-6>A
A>Q5
R0-5>A
A>Q4
R0-4>A
A>Q3
R0-3>A
A>Q2
R0-2>A
A>Q1
R0-1>A
A>Q0
Q>R2                    ; Transfer shifted result into R2
R2>DATA                 ; Store result in Register A
R1-0>A                  ; Clear Q[7:1]
A>Q7
A>Q6
A>Q5
A>Q4
A>Q3
A>Q2
A>Q1
R0-0>A                  ; Get bit 0 of original value before shifting
A>Q0                    ; b0 -> C
Q>R3                    ; Store Carry in R3
FBH>AL                  ; Save to the Carry Status Register
R3>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0700H               ; OP.0E SLLA/SLAA  Shift Left Logical/Arithmetic on Reg A
1FH>AH                  ;              C <- b7 b6 b5 b4 b3 b2 b1 b0 <- 0
FCH>AL
DATA>R0                 ; Read A Register and store in R0
00H>R1                  ; Clear Register R1 to insert a '0' in bit 0
R1-0>A
A>Q0
R0-0>A                  ; shift bit 6:0 to 7:1, result in Q
A>Q1
R0-1>A
A>Q2
R0-2>A
A>Q3
R0-3>A
A>Q4
R0-4>A
A>Q5
R0-5>A
A>Q6
R0-6>A
A>Q7
Q>R2                    ; Transfer shifted result into R2
R2>DATA                 ; Store result in Register A
R1-0>A                  ; Clear Q[7:1]
A>Q7
A>Q6
A>Q5
A>Q4
A>Q3
A>Q2
A>Q1
R0-7>A                  ; Get bit 7 of original value before shifting
A>Q0                    ; b7 -> C
Q>R3                    ; Store Carry in R3
FBH>AL                  ; Save to the Carry Status Register
R3>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0780H               ; OP.0F JRNC
1FH>AH                  ; Read C bit and put in A ALU input
FBH>AL
DATA>R0
R0-0>A
0FH>UH                  ; if C = 0 then prepare the jump JRA
0AH>UL
JMP_A=0
02H>UH                  ; NEXT OP.
00H>UL
JMP                     
FEH>AL                  ; Put IP on Address Bus
DATA>R0
FFH>AL
DATA>R1
R0>AH
R1>AL
0CH>UH                  ; do the JRA
00H>UL
JMP                     ; ***************************************************
ORG/0800H               ; OP.10 RRCA Rotate Right Logical Reg A through Carry  
1FH>AH                  ;            C -> b7 b6 b5 b4 b3 b2 b1 b0 -> C
FCH>AL
DATA>R0                 ; Read A Register and store in R0
FBH>AL                  ; Read Carry and put in R1
DATA>R1
R1-0>A                  ; Take Carry from Register R1 and insert in bit 7
A>Q7
R0-7>A                  ; shift bit 6:1 to 5:0, result in Q
A>Q6
R0-6>A
A>Q5
R0-5>A
A>Q4
R0-4>A
A>Q3
R0-3>A
A>Q2
R0-2>A
A>Q1
R0-1>A
A>Q0
Q>R2                    ; Store shifted result in R2
FCH>AL                  ; Store result in Register A
R2>DATA
00H>R3                  ; Clear Q[7:1]
R3-0>A                  
A>Q7
A>Q6
A>Q5
A>Q4
A>Q3
A>Q2
A>Q1
R0-0>A                  ; Get bit 0 of original value before shifting
A>Q0                    ; b0 -> C
Q>R4                    ; Store Carry in R4
FBH>AL                  ; Save to the Carry Status Register
R4>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0880H               ; OP.11 RCF  Reset Carry Flag  Carry <- 0 
00H>R0                  ; clear all bits in R0
1FH>AH                  ; Write in carry satus bit
FBH>AL
R0>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0900H               ; OP.12 SCF  Set Carry Flag  Carry <- 1
01H>R0                  ; Set carry flag
1FH>AH                  ; Write in carry satus bit
FBH>AL
R0>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0980H               ; OP.13 DECXL  Decrement XL  E updated
1FH>AH                  ; Read XL and put in R0
F4H>AL
DATA>R0
3AH>UH                  ;          | ADD. Routine R0-1>R0
00H>UL                  ;          |
13H>R6                  ;          | ADD. return
08H>R7                  ; 
JMP
R0>DATA                 ; Put result in XL
R0-0>A                  ; Update E (If result is zero then set E flag )
OR R0-1                 ; NOT( 7 OR 6 OR 5 OR 4 OR 3 OR 2 OR 1 OR 0 )
Q1>A
OR R0-2
Q2>A
OR R0-3
Q3>A
OR R0-4
Q4>A
OR R0-5
Q5>A
OR R0-6
Q6>A
OR R0-7
Q7>A
NOT A-0
00H>R1                  ; Set Q<7:1> to 0
R1-0>A                  ; To have a clean E Status Byte
A>Q1                   
A>Q2                   
A>Q3
A>Q4
A>Q5
A>Q6
A>Q7
Q>R1                    ; Move Q byte in R1
FAH>AL                  ; Store E in Equal Status RAM location
R1>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0A00H               ; OP.14 RRC ****H Rotate Right Logical Address through Carry  
DATA>R2                 ; READ MSB ADDRESS    C -> b7 b6 b5 b4 b3 b2 b1 b0 -> C
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
14H>R4                  ;  IP+1>IP | ADD. RETURN
06H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R3                 ; READ LSB ADDRESS
R2>AH                   ; PUT ADDRESS ON ADDRESS BUS
R3>AL
DATA>R0                 ; READ POINTED BYTE, put in R0
1FH>AH                  ; Read Carry and put in R1
FBH>AL                  
DATA>R1
R1-0>A                  ; Take Carry from Register R1 and insert in bit 7
A>Q7
R0-7>A                  ; shift bit 6:1 to 5:0, result in Q
A>Q6
R0-6>A
A>Q5
R0-5>A
A>Q4
R0-4>A
A>Q3
R0-3>A
A>Q2
R0-2>A
A>Q1
R0-1>A
A>Q0
Q>R1                    ; Store shifted result in R1
R2>AH                   ; Store result in pointed byte
R3>AL
R1>DATA
00H>R2                  ; Clear Q[7:1]
R2-0>A                  
A>Q7
A>Q6
A>Q5
A>Q4
A>Q3
A>Q2
A>Q1
R0-0>A                  ; Get bit 0 of original value before shifting
A>Q0                    ; b0 -> C
Q>R4                    ; Store Carry in R4
1FH>AH                  ; Save to the Carry Status Register
FBH>AL                  
R4>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/0A80H               ; OP.15 SRL ****H   Shift Right Logical on Address
DATA>R2                 ; READ MSB ADDRESS  0 -> b7 b6 b5 b4 b3 b2 b1 b0 -> C
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
15H>R4                  ;  IP+1>IP | ADD. RETURN
06H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R3                 ; READ LSB ADDRESS
R2>AH                   ; PUT ADDRESS ON ADDRESS BUS
R3>AL
DATA>R0                 ; READ POINTED BYTE, put in R0
00H>R1                  ; Clear Register R1 to insert a '0' in bit 7
R1-0>A
A>Q7
R0-7>A                  ; shift bit 6:1 to 5:0, result in Q
A>Q6
R0-6>A
A>Q5
R0-5>A
A>Q4
R0-4>A
A>Q3
R0-3>A
A>Q2
R0-2>A
A>Q1
R0-1>A
A>Q0
Q>R1                    ; Transfer shifted result into R1
R2>AH                   ; Store shifted value back to address
R3>AL
R1>DATA                 
00H>R1
R1-0>A                  ; Clear Q[7:1]
A>Q7
A>Q6
A>Q5
A>Q4
A>Q3
A>Q2
A>Q1
R0-0>A                  ; Get bit 0 of original value before shifting
A>Q0                    ; b0 -> C
Q>R0                    ; Store Carry in R0
1FH>AH                  ; Save to the Carry Status Register
FBH>AL                  
R0>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/0B00H               ; OP.16 STX ****H   STORE X REGISTER TO ADDRESS
DATA>R3                 ; READ MSB ADDRESS
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
16H>R4                  ;  IP+1>IP | ADD. RETURN
06H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R2                 ; READ LSB ADDRESS
1FH>AH                  ; READ XH
F3H>AL
DATA>R4
R3>AH                   ; PUT ADDRESS ON ADDRESS BUS
R2>AL
R4>DATA                 ; Store XH and increment Storage address (R3:R2)
R2-0>A
A>Q0                    ; Compute the Carrys
AND R2-1
Q1>A
AND R2-2
Q2>A
AND R2-3
Q3>A
AND R2-4
Q4>A
AND R2-5
Q5>A
AND R2-6
Q6>A
AND R2-7
Q>R0                    ; Savec Cout in R0-7
Q6>A
XOR R2-7
Q5>A
XOR R2-6
Q4>A
XOR R2-5
Q3>A
XOR R2-4
Q2>A
XOR R2-3
Q1>A
XOR R2-2
Q0>A
XOR R2-1
R2-0>A
NOT A-0
Q>R2                    ; Save result in R2
R0-7>A                  ; Add 1 to MSB if there is a Carry
16H>UH
52H>UL           
JMP_A=0                 ; If Cin=0 then save by jumping
R3-0>A                  ; If Cin=1 then increment R3
A>Q0                    ; Compute Carrys between bits
AND R3-1
Q1>A
AND R3-2
Q2>A
AND R3-3
Q3>A
AND R3-4
Q4>A
AND R3-5
Q5>A
AND R3-6
Q6>A
AND R3-7
Q6>A
XOR R3-7
Q5>A
XOR R3-6
Q4>A
XOR R3-5
Q3>A
XOR R3-4
Q2>A
XOR R3-3
Q1>A
XOR R3-2
Q0>A
XOR R3-1
R3-0>A
NOT A-0
Q>R3                    ; increment result
1FH>AH                  ; READ XL
F4H>AL
DATA>R4
R3>AH                   ; PUT ADDRESS ON ADDRESS BUS
R2>AL
R4>DATA                 ; WRITE XL at destination address
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/0B80H               ; OP.17 ORA #**H   LOGICAL OR BETWEEN REG A AND BYTE
DATA>R0                 ; IMMEDIATE BYTE STORED INTO R0
1FH>AH
FCH>AL
DATA>R1                 ; REG A STORED TO R1
R0-0>A                  ; BITWISE OR, RESULT STORED IN Q
OR R1-0
R0-1>A
OR R1-1
R0-2>A
OR R1-2
R0-3>A
OR R1-3
R0-4>A
OR R1-4
R0-5>A
OR R1-5
R0-6>A
OR R1-6
R0-7>A
OR R1-7
Q>R0                    ; MOVE Q TO R0
R0>DATA                 ; STORE RESULT IN REG A
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/0C00H               ; OP.18 XORA #**H   REG A EXCLUSIVE OR immediate Byte
DATA>R0                 ; PREND DONNE
1FH>AH
FCH>AL
DATA>R1                 ; PREND DONNE
R0-0>A
XOR R1-0
R0-1>A
XOR R1-1
R0-2>A
XOR R1-2
R0-3>A
XOR R1-3
R0-4>A
XOR R1-4
R0-5>A
XOR R1-5
R0-6>A
XOR R1-6
R0-7>A
XOR R1-7
Q>R0
R0>DATA                 ; MET LE RESULTAT DANS REG. A
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/0C80H               ; OP.19 NOTA   NOT Logic on Register A
1FH>AH
FCH>AL
DATA>R0                 ; Read Register A
R0-0>A                  ; Do the NOT operation on all bits
NOT A-0
R0-1>A
NOT A-1
R0-2>A
NOT A-2
R0-3>A
NOT A-3
R0-4>A
NOT A-4
R0-5>A
NOT A-5
R0-6>A
NOT A-6
R0-7>A
NOT A-7
Q>R0
R0>DATA                 ; Put result in Register A
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; ***************************************************
ORG/0D00H               ; OP.1A CMPX 0x****   COMPARE X to immediate value
DATA>R0                 ; Read MSB Data       UPDATE STATUS E (EQUAL) TO 1 WHEN EQUAL
1FH>AH                  ; Read XH             ELSE E = 0.
F3H>AL
DATA>R1
R0-0>A                  ; XNOR between each bits on MSB
XNOR R1-0
R0-1>A
XNOR R1-1
R0-2>A
XNOR R1-2
R0-3>A
XNOR R1-3
R0-4>A
XNOR R1-4
R0-5>A
XNOR R1-5
R0-6>A
XNOR R1-6
R0-7>A
XNOR R1-7
Q>R0                    ; result in R0
R0-0>A                  ; AND between each bits in R0
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q7>A                    ; Equal status in A
1AH>UH                  ; If MSB identical we need to continue to verify LSB
33H>UL
JMP_A=1
00H>R0                  ; MSB is different, force '0' in Equal Status bit position <0>
1FH>AH
FAH>AL
R0>DATA
1EH>UH                  ; skip LSB | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
1AH>R4                  ;  IP+1>IP | ADD. RETURN R4:MSB R5:LSB
30H>R5                  ;          |
JMP                     ;          | JMP TO ROUTINE
02H>UH                  ; NEXT OP.
00H>UL
JMP
3BH>UH                  ; Continue compare with the LSB
00H>UL                  ;          | ADD. ROUTINE INCREMENT IP
1AH>R4                  ;  IP+1>IP | ADD. RETURN
38H>R5                  ;  IP>ADD  | JMP TO ROUTINE
JMP                     ;
DATA>R0                 ; Read LSB Data
1FH>AH                  ; Read XL
F4H>AL
DATA>R1
R0-0>A                  ; XNOR between each bits on MSB
XNOR R1-0
R0-1>A
XNOR R1-1
R0-2>A
XNOR R1-2
R0-3>A
XNOR R1-3
R0-4>A
XNOR R1-4
R0-5>A
XNOR R1-5
R0-6>A
XNOR R1-6
R0-7>A
XNOR R1-7
Q>R0                    ; result in R0
R0-0>A                  ; AND between each bits in R0
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q7>A                    ; Equal status in A
1AH>UH                  ; If LSB identical go set the equal flag
66H>UL
JMP_A=1
00H>R0                  ; Else it's different clear Equal Status bit position <0>
1FH>AH
FAH>AL
R0>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP
01H>R0                  ; MSB and LSB are identical the set '1' in Equal Status bit position <0>
1FH>AH
FAH>AL
R0>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1400H               ; OP.28 ADCA ****H  A + C + BYTE AT ADDRESS, C UPDATE
DATA>R2                 ; READ MSB ADDRESS
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
28H>R4                  ;  IP+1>IP | ADD. RETURN
06H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R3                 ; READ LSB ADDRESS
R2>AH                   ; PUT ADDRESS ON ADDRESS BUS
R3>AL
DATA>R0                 ; READ POINTED BYTE
1FH>AH                  ; READ REG A
FCH>AL   
DATA>R1
1FH>AH                  ; READ CARRY IN
FBH>AL
DATA>R2
3FH>UH                  ;           | ADD. ROUTINE
00H>UL                  ; R0+R1>R0  |
28H>R6                  ; Cout>R2-0 | RETURN ADDRESS
15H>R7
JMP
1FH>AH                  ; PUT SUMM IN REG. A
FCH>AL
R0>DATA
FBH>AL                  ; PUT Cout IN REG C (Carry)
R2>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1480H               ; OP.29 ADDA ****H  ADD A WITH BYTE AT ADDRESS, C UPDATE
DATA>R2                 ; READ MSB ADDRESS
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
29H>R4                  ;  IP+1>IP | ADD. RETURN
06H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R3                 ; READ LSB ADDRESS
R2>AH                   ; PUT ADDRESS ON ADDRESS BUS
R3>AL
DATA>R0                 ; READ POINTED BYTE
1FH>AH                  ; READ REG A
FCH>AL   
DATA>R1
00H>R2                  ; Put Cin=0
3FH>UH                  ;           | ADD. ROUTINE
00H>UL                  ; R0+R1>R0  |
29H>R6                  ; Cout>R2-0 | RETURN ADDRESS
13H>R7
JMP
1FH>AH                  ; PUT SUMM IN REG. A
FCH>AL
R0>DATA
FBH>AL                  ; PUT Cout IN REG C (Carry)
R2>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1500H               ; OP.2A LDA ****H  LOAD A WITH BYTE AT ADDRESS
DATA>R2                 ; READ MSB ADDRESS
3BH>UH                  ;          | ADD. ROUTINE INCREMENT IP
00H>UL                  ;          |
2AH>R4                  ;  IP+1>IP | ADD. RETURN
06H>R5                  ;  IP>ADD  |
JMP                     ;          | JMP TO ROUTINE
DATA>R3                 ; READ LSB ADDRESS
R2>AH                   ; PUT ADDRESS ON ADDRESS BUS
R3>AL
DATA>R0                 ; READ POINTED BYTE
1FH>AH                  ; PUT IN REGISTER A
FCH>AL
R0>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1580H               ; OP.2B JNEQ ****H  JUMP IF STATUS E (EQUAL) = 1
1FH>AH                  ; LIS BIT E ET MET DANS ENTREE A DE L'ALU.
FAH>AL
DATA>R0
R0-0>A
2BH>UH                  ; ADDRESSE DU SAUT DANS LE UPROG. SI E=0
0CH>UL
JMP_A=0
3CH>UH                  ; ON PASSE SI ON A EGALITE  E=1    | ADD. ROUTINE
00H>UL                  ;                          IP+1>IP |
02H>R4                  ;                                  | ADD. RETOUR
00H>R5                  ;                                  | PROCHAIN OP.
JMP
1FH>AH                  ; ARRIVAL WHEN E=0, READ IPH
FEH>AL
DATA>R0
FFH>AL                  ; READ IPL
DATA>R1                          
R0>AH                   ; WRITE IPH:IPL IN AH:AL
R1>AL
DATA>R2                 ; GET MSB OF JUMP ADDRESS
3BH>UH                  ;          | ADD. ROUTINE
00H>UL                  ;  IP+1>IP |
2BH>R4                  ;  IP>ADD  | ADD. RETOUR
19H>R5                  ;          |
JMP
DATA>R3                 ; GET LSB OF JUMP ADDRESS
1FH>AH                  ; MET MSB ADD. DE SAUT DANS IPH
FEH>AL
R2>DATA
FFH>AL                  ; MET LSB ADD. DE SAUT DANS IPL
R3>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute ( SAUT DU A L'INEGALITE )
00H>UL
JMP                     ; ***************************************************
ORG/1600H               ; OP.2C JEQ ****H  JUMP IF STATUS E (EQUAL) = 1
1FH>AH                  ; LIS BIT E ET MET DANS ENTREE A DE L'ALU.
FAH>AL
DATA>R0
R0-0>A
2CH>UH                  ; ADDRESSE DU SAUT DANS LE UPROG. SI E=0
1CH>UL
JMP_A=0
FEH>AL                  ; ICI ON A E=1 ALORS ON PREND L'ADDRESSE  MSB ADD.
DATA>R2                 ; IPH > R2
FFH>AL
DATA>R3                 ; IPL > R3
R2>AH                   ; IP > ADD
R3>AL
DATA>R2                 ; TAKE MSB ADD WHERE TO JUMP AND PUT IN R2
3BH>UH                  ;          | ADD. ROUTINE
00H>UL                  ;  IP+1>IP |
2CH>R4                  ;  IP>ADD  | ADD. RETOUR
13H>R5                  ;          |
JMP
DATA>R3                 ; PREND LSB WHERE TO JUMP AND PUT IN R3
1FH>AH                  ; MET MSB ADD. DE SAUT DANS IPH
FEH>AL
R2>DATA
FFH>AL                  ; MET LSB ADD. DE SAUT DANS IPL
R3>DATA
01H>UH                  ; EXECUTE OP. POINTEE ( SAUT DU A L'EGALITE )
00H>UL
JMP
3CH>UH                  ; POINT ARRIVE SI INEGALITE E=0     | ADD. ROUTINE
00H>UL                  ;                           IP+1>IP |
02H>R4                  ;                                   | ADD. RETOUR
00H>R5                  ;                                   | PROCHAIN OP.
JMP                     ; ***************************************************
ORG/1680H               ; OP.2D CMPA #**H COMPARE A WITH IMMEDIATE VALUE, 
DATA>R0                 ; Read Data       UPDATE STATUS E (EQUAL) TO 1 WHEN EQUAL
1FH>AH                  ; Read Reg. A     ELSE E = 0.
FCH>AL
DATA>R1
R0-0>A
XNOR R1-0
R0-1>A
XNOR R1-1
R0-2>A
XNOR R1-2
R0-3>A
XNOR R1-3
R0-4>A
XNOR R1-4
R0-5>A
XNOR R1-5
R0-6>A
XNOR R1-6
R0-7>A
XNOR R1-7
Q>R0
R0-0>A
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q7>A
A>Q0                    ; Place Equal Status in bit position <0>
00H>R1                  ; Put '0' in ALU input A
R1-0>A
A>Q1                    ; Set Q<7:1> to 0
A>Q2                    ; To have a clean Equal Status Byte
A>Q3
A>Q4
A>Q5
A>Q6
A>Q7
Q>R0                    ; Move Q byte in R0
1FH>AH
FAH>AL
R0>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1700H               ; OP.2E ADCA #**H   ACCA+M+C>ACCA     C UPDATED
DATA>R0                 ; READ IMMEDIATE VALUE
1FH>AH                  ; READ REGISTER A
FCH>AL
DATA>R1
1FH>AH                  ; READ CARRY IN
FBH>AL
DATA>R2
3FH>UH                  ;           | ADD. ROUTINE
00H>UL                  ; R0+R1>R0  |
2FH>R6                  ; Cout>R2-0 | ADD. RETOUR
0AH>R7                  ;           |
JMP                     ;           |
1FH>AH                  ; MET SOMME DANS REG. A
FCH>AL
R0>DATA
FBH>AL                  ; MET Cout DANS REG C (Carry)
R2>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1780H               ; OP.2F ADDA #**H   ACCA+M>ACCA     C UPDATED
DATA>R0                 ; READ IMMEDIATE BYTE FOLLOWING OP CODE
1FH>AH                  ; READ REGISTER A
FCH>AL
DATA>R1
00H>R2                  ; FORCED Cin=0
3FH>UH                  ;           | ROUTINE ADDRESS
00H>UL                  ; R0+R1>R0  |
2FH>R6                  ; Cout>R2-0 | RETURN ADDRESS
0AH>R7                  ;           |
JMP                     ;           |
1FH>AH                  ; PUT SUMM INTO A REGISTER
FCH>AL
R0>DATA
FBH>AL                  ; PUT Cout INTO C (Carry) REGISTER
R2>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1800H               ; OP.30 LDA #**H  LOAD IMMEDIATE VALUE IN REGISTER A
DATA>R0                 ; READ HEX VALUE TO LOAD
1FH>AH                  ; PUT VALUE AT REGISTER A ADDRESS
FCH>AL
R0>DATA
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1880H               ; OP.31 STA ****H   STORE REG.A TO ADDRESSE
DATA>R2                 ; PREND MSB ADD. DE STOCKAGE DE A
3BH>UH                  ;          | ADD. ROUTINE
00H>UL                  ;  IP+1>IP |
31H>R4                  ;  IP>ADD  | ADD. RETOUR
06H>R5                  ;          |
JMP
DATA>R3                 ; PREND LSB ADD. DE STOCKAGE DE A
1FH>AH                  ; LIS LE REGISTRE A
FCH>AL
DATA>R0
R2>AH                   ; MET L'ADDRESSE DE DESTINATION SUR BUS ADDRESSE
R3>AL
R0>DATA                 ; STOCKE REGISTRE A A L'ADDRESSE POINTEE
02H>UH                  ; NEXT OP.
00H>UL                  ;
JMP                     ; ***************************************************
ORG/1900H               ; OP.32 JMP ****H JUMP INCONDITIONAL TO ADDRESS
DATA>R2                 ; TALE MSB ADDRESS 
3BH>UH                  ;          | ADD. ROUTINE
00H>UL                  ;  IP+1>IP |
32H>R4                  ;  IP>ADD  | ADD. RETURN
06H>R5                  ;          |
JMP
DATA>R3                 ; PREND LSB ADD. DE SAUT INCONDITIONNEL
1FH>AH                  ; MET MSB ADD. DE SAUT DANS IPH
FEH>AL
R2>DATA
FFH>AL                  ; MET LSB ADD. DE SAUT DANS IPL
R3>DATA
01H>UH                  ; Get Pointed OP Code by IP and Execute
00H>UL
JMP                     ; **************************************************
ORG/1980H               ; OP.33 ANDA #**H  REGISTER A AND LOGICAL IMMEDIATE 
DATA>R0                 ; TAKE IMMEDIATE BYTE AND STORE IN R0
1FH>AH
FCH>AL
DATA>R1                 ; READ A REGISTER AND STORE IN R1
R0-0>A                  ; DO BITWISE AND BBETWEEN R0 AND R1
AND R1-0                ; BUILD RESULT IN Q
R0-1>A
AND R1-1
R0-2>A
AND R1-2
R0-3>A
AND R1-3
R0-4>A
AND R1-4
R0-5>A
AND R1-5
R0-6>A
AND R1-6
R0-7>A
AND R1-7
Q>R0                    ; MOVE Q TO R0
R0>DATA                 ; STORE R0 INTO REGISTER A
02H>UH                  ; NEXT OP.
00H>UL
JMP                     ; ***************************************************
ORG/1A00H               ; 1AXX Incrementer (Not working)
01H>R0
JMP
02H>R0
JMP
03H>R0
JMP
04H>R0
JMP
05H>R0
JMP
06H>R0
JMP
07H>R0
JMP
08H>R0
JMP
09H>R0
JMP
0AH>R0
JMP
0BH>R0
JMP
0CH>R0
JMP
0DH>R0
JMP
0EH>R0
JMP
0FH>R0
JMP
10H>R0
JMP
11H>R0
JMP
12H>R0
JMP
13H>R0
JMP
14H>R0
JMP
15H>R0
JMP
16H>R0
JMP
17H>R0
JMP
18H>R0
JMP
19H>R0
JMP
1AH>R0
JMP
1BH>R0
JMP
1CH>R0
JMP
1DH>R0
JMP
1EH>R0
JMP
1FH>R0
JMP
20H>R0
JMP
21H>R0
JMP
22H>R0
JMP
23H>R0
JMP
24H>R0
JMP
25H>R0
JMP
26H>R0
JMP
27H>R0
JMP
28H>R0
JMP
29H>R0
JMP
2AH>R0
JMP
2BH>R0
JMP
2CH>R0
JMP
2DH>R0
JMP
2EH>R0
JMP
2FH>R0
JMP
30H>R0
JMP
31H>R0
JMP
32H>R0
JMP
33H>R0
JMP
34H>R0
JMP
35H>R0
JMP
36H>R0
JMP
37H>R0
JMP
38H>R0
JMP
39H>R0
JMP
3AH>R0
JMP
3BH>R0
JMP
3CH>R0
JMP
3DH>R0
JMP
3EH>R0
JMP
3FH>R0
JMP
40H>R0
JMP
41H>R0
JMP
42H>R0
JMP
43H>R0
JMP
44H>R0
JMP
45H>R0
JMP
46H>R0
JMP
47H>R0
JMP
48H>R0
JMP
49H>R0
JMP
4AH>R0
JMP
4BH>R0
JMP
4CH>R0
JMP
4DH>R0
JMP
4EH>R0
JMP
4FH>R0
JMP
50H>R0
JMP
51H>R0
JMP
52H>R0
JMP
53H>R0
JMP
54H>R0
JMP
55H>R0
JMP
56H>R0
JMP
57H>R0
JMP
58H>R0
JMP
59H>R0
JMP
5AH>R0
JMP
5BH>R0
JMP
5CH>R0
JMP
5DH>R0
JMP
5EH>R0
JMP
5FH>R0
JMP
60H>R0
JMP
61H>R0
JMP
62H>R0
JMP
63H>R0
JMP
64H>R0
JMP
65H>R0
JMP
66H>R0
JMP
67H>R0
JMP
68H>R0
JMP
69H>R0
JMP
6AH>R0
JMP
6BH>R0
JMP
6CH>R0
JMP
6DH>R0
JMP
6EH>R0
JMP
6FH>R0
JMP
70H>R0
JMP
71H>R0
JMP
72H>R0
JMP
73H>R0
JMP
74H>R0
JMP
75H>R0
JMP
76H>R0
JMP
77H>R0
JMP
78H>R0
JMP
79H>R0
JMP
7AH>R0
JMP
7BH>R0
JMP
7CH>R0
JMP
7DH>R0
JMP
7EH>R0
JMP
7FH>R0
JMP
80H>R0
JMP
81H>R0
JMP
82H>R0
JMP
83H>R0
JMP
84H>R0
JMP
85H>R0
JMP
86H>R0
JMP
87H>R0
JMP
88H>R0
JMP
89H>R0
JMP
8AH>R0
JMP
8BH>R0
JMP
8CH>R0
JMP
8DH>R0
JMP
8EH>R0
JMP
8FH>R0
JMP
90H>R0
JMP
91H>R0
JMP
92H>R0
JMP
93H>R0
JMP
94H>R0
JMP
95H>R0
JMP
96H>R0
JMP
97H>R0
JMP
98H>R0
JMP
99H>R0
JMP
9AH>R0
JMP
9BH>R0
JMP
9CH>R0
JMP
9DH>R0
JMP
9EH>R0
JMP
9FH>R0
JMP
A0H>R0
JMP
A1H>R0
JMP
A2H>R0
JMP
A3H>R0
JMP
A4H>R0
JMP
A5H>R0
JMP
A6H>R0
JMP
A7H>R0
JMP
A8H>R0
JMP
A9H>R0
JMP
AAH>R0
JMP
ABH>R0
JMP
ACH>R0
JMP
ADH>R0
JMP
AEH>R0
JMP
AFH>R0
JMP
B0H>R0
JMP
B1H>R0
JMP
B2H>R0
JMP
B3H>R0
JMP
B4H>R0
JMP
B5H>R0
JMP
B6H>R0
JMP
B7H>R0
JMP
B8H>R0
JMP
B9H>R0
JMP
BAH>R0
JMP
BBH>R0
JMP
BCH>R0
JMP
BDH>R0
JMP
BEH>R0
JMP
BFH>R0
JMP
C0H>R0
JMP
C1H>R0
JMP
C2H>R0
JMP
C3H>R0
JMP
C4H>R0
JMP
C5H>R0
JMP
C6H>R0
JMP
C7H>R0
JMP
C8H>R0
JMP
C9H>R0
JMP
CAH>R0
JMP
CBH>R0
JMP
CCH>R0
JMP
CDH>R0
JMP
CEH>R0
JMP
CFH>R0
JMP
D0H>R0
JMP
D1H>R0
JMP
D2H>R0
JMP
D3H>R0
JMP
D4H>R0
JMP
D5H>R0
JMP
D6H>R0
JMP
D7H>R0
JMP
D8H>R0
JMP
D9H>R0
JMP
DAH>R0
JMP
DBH>R0
JMP
DCH>R0
JMP
DDH>R0
JMP
DEH>R0
JMP
DFH>R0
JMP
E0H>R0
JMP
E1H>R0
JMP
E2H>R0
JMP
E3H>R0
JMP
E4H>R0
JMP
E5H>R0
JMP
E6H>R0
JMP
E7H>R0
JMP
E8H>R0
JMP
E9H>R0
JMP
EAH>R0
JMP
EBH>R0
JMP
ECH>R0
JMP
EDH>R0
JMP
EEH>R0
JMP
EFH>R0
JMP
F0H>R0
JMP
F1H>R0
JMP
F2H>R0
JMP
F3H>R0
JMP
F4H>R0
JMP
F5H>R0
JMP
F6H>R0
JMP
F7H>R0
JMP
F8H>R0
JMP
F9H>R0
JMP
FAH>R0
JMP
FBH>R0
JMP
FCH>R0
JMP
FDH>R0
JMP
FEH>R0
JMP
FFH>R0
JMP
00H>R0
80H>R1
JMP                     ; ***************************************************
ORG/1D00H               ; 3A00H  ROUTINE R0 - 1 > R0 (No Carry) Return R6:R7
R0-0>A                  ; NOT R0 > R0
NOT A-0
R0-1>A
NOT A-1
R0-2>A
NOT A-2
R0-3>A
NOT A-3
R0-4>A
NOT A-4
R0-5>A
NOT A-5
R0-6>A
NOT A-6
R0-7>A
NOT A-7
Q>R0
R0-0>A                  ; R0+1>R0
A>Q0
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q>R1                    ; SAVE Cout into R1-7 (Not used)
Q6>A
XOR R0-7
Q5>A
XOR R0-6
Q4>A
XOR R0-5
Q3>A
XOR R0-4
Q2>A
XOR R0-3
Q1>A
XOR R0-2
Q0>A
XOR R0-1
R0-0>A
NOT A-0
Q>R0                    ; Save temporary result into R0
R0-0>A                  ; NOT R0 > R0
NOT A-0
R0-1>A
NOT A-1
R0-2>A
NOT A-2
R0-3>A
NOT A-3
R0-4>A
NOT A-4
R0-5>A
NOT A-5
R0-6>A
NOT A-6
R0-7>A
NOT A-7
Q>R0
R6>UH                   ; Return to calling microprogram
R7>UL
JMP                     ; ******************************************************
ORG/1D80H               ; 3B00H  ROUTINE   * IP+1>IP   IP>ADD.                 *
1FH>AH                  ;        READ IPL  * RETURN  R4:MSB ADD. R5:LSB ADD.   *
FFH>AL                  ;        PUT IN R0 *************************************
DATA>R0                 ; INCREMENT (COUT R1-7) R0+1>R0
R0-0>A
A>Q0                    ; Compute the Carrys
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q>R1                    ; Savec Cout in R1-7
Q6>A
XOR R0-7
Q5>A
XOR R0-6
Q4>A
XOR R0-5
Q3>A
XOR R0-4
Q2>A
XOR R0-3
Q1>A
XOR R0-2
Q0>A
XOR R0-1
R0-0>A
NOT A-0
Q>R0                    ; Save result in R0
1FH>AH                  ; Save increment result in IPL
FFH>AL
R0>DATA
FEH>AL                  ; Read IPH
DATA>R0
R1-7>A                  ; Add 1 to IPH if there is a Carry R0 + (R1-7) > R
3BH>UH
50H>UL           
JMP_A=0                 ; If Cin=0 then save by jumping
R0-0>A                  ; If not we increment R0 containing IPH
A>Q0                    ; Compute Carrys between bits
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q6>A
XOR R0-7
Q5>A
XOR R0-6
Q4>A
XOR R0-5
Q3>A
XOR R0-4
Q2>A
XOR R0-3
Q1>A
XOR R0-2
Q0>A
XOR R0-1
R0-0>A
NOT A-0
Q>R0                    ; Increment result in R0
1FH>AH                  ; Save new IPH value
FEH>AL            
R0>DATA
1FH>AH                  ; Read IPH
FEH>AL
DATA>R0
FFH>AL                  ; Read IPL
DATA>R1
R0>AH                   ; Put IP in Address Bus
R1>AL
; Begin of alternate method using table. But it cant work; the table return address would double the EEPROM need.
; Method does not procure clock cycle economy.
;00H>R0                  ; Clear bit Q<0>
;R0-0>A
;A>Q0
;1FH>AH                  ; Read IPL and put in R1
;FFH>AL
;DATA>R1
;R1-0>A                  ; shift R1 one bit left and put in R2
;A>Q1
;R1-1>A
;A>Q2
;R1-2>A
;A>Q3
;R1-3>A
;A>Q4
;R1-4>A
;A>Q5
;R1-5>A
;A>Q6
;R1-6>A
;A>Q7
;Q>R2
;R1-7>A                 ; look at bit 7
;3BH>UH
;00H>UL
;JMP_A=1
;34H>UH                  ; it is 0
;00H>UL
;JMP
;36H>UH                  ; it is 1
;00H>UL
;JMP
; End of alternate method
R4>UH                   ; Return to calling routine
R5>UL
JMP                     ; *************************************************
ORG/1E00H               ; 3C00H  INCREMENT IP
1FH>AH                  ;        Return  R4:MSB R5:LSB
FFH>AL                  ; Read IPL
DATA>R0                 
3EH>UH                  ; Address Increment routine
00H>UL
3CH>R6                  ; Address Return
08H>R7
JMP
1FH>AH                  ; Result in IPL
FFH>AL
R0>DATA
FEH>AL                  ; Read IPH
DATA>R0
3DH>UH                  ; Address routine to Add Carry
00H>UL
3CH>R6                  ; Return Address
12H>R7
JMP                     ; Call routine
1FH>AH                  ; Save result Add Carry
FEH>AL
R0>DATA                 
R4>UH                   ; Return Address
R5>UL
JMP                     ; ***************************************************
ORG/1E80H               ; 3D00H  ADD CARRY   R0+(R1-7)>R0  Cout:R1-7
R1-7>A                  ;                    Return R6:MSB R7:LSB  
3DH>UH
28H>UL
JMP_A=0                 ; If Cin=0 then jump to end to go to return 
R0-0>A                  ; Increment R0
A>Q0                    ; Compute Carry
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q>R1                    ; Save Cout in R1-7
Q6>A
XOR R0-7
Q5>A
XOR R0-6
Q4>A
XOR R0-5
Q3>A
XOR R0-4
Q2>A
XOR R0-3
Q1>A
XOR R0-2
Q0>A
XOR R0-1
R0-0>A
NOT A-0
Q>R0                    ; Save result in R0
R6>UH                   ; Return Address MSB
R7>UL                   ;                LSB
JMP                     ; End of incrementation
00H>R1                  ; Come here if no incrementation (Cout=0)
R6>UH                   ; Return Address MSB
R7>UL                   ;                LSB
JMP                     ; ***************************************************
ORG/1F00H               ; 3E00H  INCREMENT R0+1>R0 Cout:R1-7
R0-0>A                  ;                  Return R6:MSB R7:LSB
A>Q0                    ; Compute Carry
AND R0-1
Q1>A
AND R0-2
Q2>A
AND R0-3
Q3>A
AND R0-4
Q4>A
AND R0-5
Q5>A
AND R0-6
Q6>A
AND R0-7
Q>R1                    ; Save Cout in R1-7
Q6>A
XOR R0-7
Q5>A
XOR R0-6
Q4>A
XOR R0-5
Q3>A
XOR R0-4
Q2>A
XOR R0-3
Q1>A
XOR R0-2
Q0>A
XOR R0-1
R0-0>A
NOT A-0
Q>R0                    ; Save result in R0
R6>UH                   ; Return Address MSB
R7>UL                   ;                LSB
JMP                     ; ***************************************************
ORG/1F80H               ; 3F00H  ADDITION R0+R1>R0  Cin:R2-0  Cout:R2-0
R0-0>A                  ;                 Return R6:MSB R7:LSB
OR R1-0                 ;                 Using R3, R4, R5
R0-1>A
OR R1-1
R0-2>A
OR R1-2
R0-3>A
OR R1-3
R0-4>A
OR R1-4
R0-5>A
OR R1-5
R0-6>A
OR R1-6
R0-7>A
OR R1-7
Q>R3
R0-0>A                  ; R0 AND R1 > R4
AND R1-0
R0-1>A
AND R1-1
R0-2>A
AND R1-2
R0-3>A
AND R1-3
R0-4>A
AND R1-4
R0-5>A
AND R1-5
R0-6>A
AND R1-6
R0-7>A
AND R1-7
Q>R4
R2-0>A                  ; Process Carry  Cin:R2-0
AND R3-0
Q0>A
OR R4-0
Q0>A
AND R3-1
Q1>A
OR R4-1
Q1>A
AND R3-2
Q2>A
OR R4-2
Q2>A
AND R3-3
Q3>A
OR R4-3
Q3>A
AND R3-4
Q4>A
OR R4-4
Q4>A
AND R3-5
Q5>A
OR R4-5
Q5>A
AND R3-6
Q6>A
OR R4-6
Q6>A
AND R3-7
Q7>A
OR R4-7
Q>R5
R2-0>A                  ; R0 XOR R1 XOR COUTn
XOR R0-0
Q0>A
XOR R1-0
R5-0>A
XOR R0-1
Q1>A
XOR R1-1
R5-1>A
XOR R0-2
Q2>A
XOR R1-2
R5-2>A
XOR R0-3
Q3>A
XOR R1-3
R5-3>A
XOR R0-4
Q4>A
XOR R1-4
R5-4>A
XOR R0-5
Q5>A
XOR R1-5
R5-5>A
XOR R0-6
Q6>A
XOR R1-6
R5-6>A
XOR R0-7
Q7>A
XOR R1-7
Q>R0                    ; Save final result in R0
R5-7>A
A>Q0                    ; Store Carry in Q Bit<0>
00H>R1
R1-0>A
A>Q1                    ; Set Q <7:1> to 0
A>Q2                    ; To have a clean carry register
A>Q3
A>Q4
A>Q5
A>Q6
A>Q7
Q>R2                    ; Save Carry
R6>UH                   ; Address return MSB
R7>UL                   ;                LSB
JMP                     ; ***************************************************